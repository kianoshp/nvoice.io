{
  "name": "grunt-template-jasmine-requirejs",
  "version": "0.1.6",
  "description": "Requirejs template for grunt-contrib-jasmine",
  "main": "src/template-jasmine-requirejs.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jsoverson/grunt-template-jasmine-requirejs"
  },
  "keywords": [
    "grunt",
    "template",
    "requirejs",
    "jasmine",
    "test"
  ],
  "author": {
    "name": "Jarrod Overson"
  },
  "license": "BSD",
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1rc5",
    "grunt-contrib-watch": "~0.1.4",
    "grunt": "~0.4.1",
    "grunt-contrib-jasmine": "~0.4.1",
    "grunt-contrib-connect": "~0.2.0"
  },
  "readme": "RequireJS template for Jasmine unit tests\n-----------------------------------------\n\n## Installation\n\n```\nnpm install grunt-template-jasmine-requirejs --save-dev\n```\n\n## Template Options\n\n### templateOptions.version\nType: `String`\nOptions: `2.0.0` to `2.1.8` or path to a local file system version(relative to Gruntfile.js). Absolute path is allowed as well. Default: latest requirejs version included\n\nThe version of requirejs to use.\n\n### templateOptions.requireConfigFile\nType `String` or `Array`\n\nThis can be a single path to a require config file or an array of paths to multiple require config files. The configuration is extracted from the require.config({}) call(s) in the file, and is passed into the require.config({}) call in the template.\n\nFiles are loaded from left to right (using a deep merge). This is so you can have a main config and then override specific settings in additional config files (like a test config) without having to duplicate entire requireJS configs.\n\nIf `requireConfig` is also specified then it will be deep-merged onto the settings specified by this directive.\n\n### templateOptions.requireConfig\nType: `Object`\n\nThis object is `JSON.stringify()`-ed ( **support serialize Function object** ) into the template and passed into `var require` variable\n\nIf `requireConfigFile` is specified then it will be loaded first and the settings specified by this directive will be deep-merged onto those.\n\n\n## Sample usage\n\n```js\n// Example configuration using a single requireJS config file\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: 'src/main.js'\n        }\n      }\n    }\n  }\n});\n```\n\n```js\n// Example configuration using an inline requireJS config\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfig: {\n            baseUrl: 'src/',\n            paths: {\n              \"jquery\": \"path/to/jquery\"\n            },\n            shim: {\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo',\n                init: function (bar) {\n                  return this.Foo.noConflict();\n                }\n              }\n            },\n            deps: ['jquery'],\n            callback: function($) {\n              // do initialization stuff\n              /*\n\n              */\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n\n\n```js\n// Example using a base requireJS config file and specifying\n// overrides with an inline requireConfig file.\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: 'src/main.js',\n          requireConfig: {\n            baseUrl: 'overridden/baseUrl',\n            shim: {\n              // foo will override the 'foo' shim in main.js\n              'foo': {\n                deps: ['bar'],\n                exports: 'Foo'\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n```js\n// Example using a multiple requireJS config files. Useful for\n// testing.\ngrunt.initConfig({\n  connect: {\n    test : {\n      port : 8000\n    }\n  },\n  jasmine: {\n    taskName: {\n      src: 'src/**/*.js',\n      options: {\n        specs: 'spec/*Spec.js',\n        helpers: 'spec/*Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n          requireConfigFile: ['src/config.js', 'spec/config.js']\n          requireConfig: {\n            baseUrl: 'overridden/baseUrl'\n          }\n        }\n      }\n    }\n  }\n});\n```\n\n\n*Note* the usage of the 'connect' task configuration. You will need to use a task like\n[grunt-contrib-connect][] if you need to test your tasks on a running server.\n\n[grunt-contrib-connect]: https://github.com/gruntjs/grunt-contrib-connect\n\n## RequireJS notes\n\nIf you end up using this template, it's worth looking at the\n[source]() in order to familiarize yourself with how it loads your files. The load process\nconsists of a series of nested `require` blocks, incrementally loading your source and specs:\n\n```js\nrequire([*YOUR SOURCE*], function() {\n  require([*YOUR SPECS*], function() {\n    require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n      // at this point your tests are already running.\n    }\n  }\n}\n```\n\nIf \"callback\" function is defined in requireConfig, above code will be injected to the end of body of \"callback\" definition\n```js\ntemplateOptions: {\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n  }\n}\n```\nGenerated runner page with require configuration looks like:\n```js\nvar require = {\n  ...\n  callback: function() {\n    // suppose we define a module here\n    define(\"config\", {\n      \"endpoint\": \"/path/to/endpoint\"\n    })\n\n    require([*YOUR SOURCE*], function() {\n      require([*YOUR SPECS*], function() {\n        require([*GRUNT-CONTRIB-JASMINE FILES*], function() {\n          // at this point your tests are already running.\n        }\n      }\n    }\n  }\n  ...\n}\n```\nThis automation can help to avoid unexpected dependency order issue\n\n### Authors / Maintainers\n\n- Jarrod Overson (@jsoverson)\n- Cloud Chen (@cloudchen)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jsoverson/grunt-template-jasmine-requirejs/issues"
  },
  "_id": "grunt-template-jasmine-requirejs@0.1.6",
  "dist": {
    "shasum": "eecfb8ee128c18ce4e20849aec9445b5cfc9185b"
  },
  "_from": "grunt-template-jasmine-requirejs@~0.1.2",
  "_resolved": "https://registry.npmjs.org/grunt-template-jasmine-requirejs/-/grunt-template-jasmine-requirejs-0.1.6.tgz"
}
